---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  bootstrap:
    desc: Bootstrap Talos
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        controller: Controller node to run command against (required)
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster... continue?
    cmds:
      - task: fetch-kubeconfig
        vars: &vars
          cluster: "{{.cluster}}"
          controller: "{{.controller}}"
      - task: bootstrap-integrations
        vars: *vars
    requires:
      vars:
        - cluster
        - controller

  bootstrap-integrations:
    desc: Bootstrap core integrations needed for Talos
    cmds:
      - until kubectl --context {{.cluster}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kube-context {{.cluster}} --file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/integrations/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.cluster}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    requires:
      vars:
        - cluster
    preconditions:
      - which helmfile
      - sh: kubectl config get-contexts {{.cluster}}
        msg: "Kubectl context {{.cluster}} not found"
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/integrations/helmfile.yaml

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl --context {{.cluster}} kubeconfig --nodes {{.controller}} \
          --force --force-context-name {{.cluster}} {{.KUBERNETES_DIR}}/{{.cluster}}
    requires:
      vars:
        - cluster
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}

  bootstrap-matchbox:
    desc: Bootstrap required Matchbox configuration to Omni for PXE Boot
    vars:
      OMNI_ADDR: omni.greyrock.io
      OMNI_USER: todd
      OMNI_MATCHBOX_CLUSTER: omni
      OMNI_MATCHBOX_NAMESPACE: network
      OMNI_MATCHBOX_PVC_PATH:
        sh: |
          kubectl get --context omni pvc -n network matchbox-matchbox-data -o json | jq -r '.spec.volumeName'
      OMNI_MATCHBOX_DIR: /mnt/openebs/local/{{.OMNI_MATCHBOX_PVC_PATH}}
      OMNI_MATCHBOX_GROUPS_DIR: "{{.OMNI_MATCHBOX_DIR}}/groups"
      OMNI_MATCHBOX_PROFILES_DIR: "{{.OMNI_MATCHBOX_DIR}}/profiles"
      OMNI_MATCHBOX_ASSETS_DIR: "{{.OMNI_MATCHBOX_DIR}}/assets/talos/{{.cluster}}"
      OMNI_MATCHBOX_POD:
        sh: |
          kubectl get --context {{.OMNI_MATCHBOX_CLUSTER}} pod -n {{.OMNI_MATCHBOX_NAMESPACE}} -l app.kubernetes.io/name=matchbox -o name | awk -F'/' '{print $2}'
      OMNI_JOINTOKEN:
        sh: |
          omnictl get connectionparams -o json | jq -r '.spec["jointoken"]'
      TALOS_BASE_URL:
        sh: |
          omnictl download iso \
          --pxe \
          | grep "https://" \
          | head -n 1 \
          | sed -E 's/\/metal-amd64//' \
          | sed -E 's/pxe\//image\//'
    cmds:
      # Prepare folders
      - ssh -l {{.OMNI_USER}} {{.OMNI_ADDR}} "sudo mkdir -p {{.OMNI_MATCHBOX_GROUPS_DIR}}"
      - ssh -l {{.OMNI_USER}} {{.OMNI_ADDR}} "sudo mkdir -p {{.OMNI_MATCHBOX_PROFILES_DIR}}"
      - ssh -l {{.OMNI_USER}} {{.OMNI_ADDR}} "sudo mkdir -p {{.OMNI_MATCHBOX_ASSETS_DIR}}"
      - ssh -l {{.OMNI_USER}} {{.OMNI_ADDR}} "sudo chown -R {{.OMNI_USER}}:{{.OMNI_USER}} {{.OMNI_MATCHBOX_DIR}}"
      # Upload Talos to Matchbox
      - for: ["kernel-amd64", "initramfs-amd64.xz"]
        cmd: |
          ssh -l {{.OMNI_USER}} {{.OMNI_ADDR}} "wget -q -O {{.OMNI_MATCHBOX_ASSETS_DIR}}/{{.ITEM}} {{.TALOS_BASE_URL}}/{{.ITEM}}"
      # Copy groups to Matchbox
      - find {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/matchbox/groups/*.json -type f | xargs -I{} scp -p {} {{.OMNI_USER}}@{{.OMNI_ADDR}}:/{{.OMNI_MATCHBOX_GROUPS_DIR}}/
      # Copy profiles to Matchbox
      - find {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/matchbox/profiles/*.json -type f | xargs -I{} scp -p {} {{.OMNI_USER}}@{{.OMNI_ADDR}}:/{{.OMNI_MATCHBOX_PROFILES_DIR}}/
      # Replace jointoken
      - ssh -l {{.OMNI_USER}} {{.OMNI_ADDR}} "find {{.OMNI_MATCHBOX_PROFILES_DIR}}/*.json -type f | xargs -I {} sed -i 's/JOINTOKEN/{{.OMNI_JOINTOKEN}}/g' {}"
      # Restart the Matchbox container
      - kubectl delete --context {{.OMNI_MATCHBOX_CLUSTER}} pod -n {{.OMNI_MATCHBOX_NAMESPACE}} {{.OMNI_MATCHBOX_POD}}
    requires:
      vars:
        - cluster
