---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: victoria-metrics
spec:
  interval: 30m
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      version: 0.18.11
      sourceRef:
        kind: HelmRepository
        name: victoria-metrics
  values:
    fullnameOverride: victoria-metrics

    # VM Operator deployment
    victoria-metrics-operator:
      enabled: true
      operator:
        disable_prometheus_converter: false # Ensure we keep enabled the converter to sync prom rules to VM rules
        enable_converter_ownership: true # Required to allow VM to remove VM rules it imports if a prometheus rule is deleted

    # Main VM Cluster in HA mode.
    vmcluster:
      enabled: true
      spec:
        # Duration to keep metrics
        retentionPeriod: "2" # this is months unless a character prefix is added (1d, 1w, etc)
        extraArgs:
          dedup.minScrapeInterval: "60s"
        replicationFactor: 3
        # Storage backend
        vmstorage:
          replicaCount: 3
          # required for HA vmagents
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1536Mi
          extraArgs:
            dedup.minScrapeInterval: 60s
            search.maxConcurrentRequests: "6"
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: openebs-hostpath
                resources:
                  requests:
                    storage: 10Gi
        # Query backend
        vmselect:
          replicaCount: 2 # HA
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 750m
              memory: 256Mi
          cacheMountPath: /select-cache
          extraArgs:
            dedup.minScrapeInterval: "60s" # should be equal to VMAgent's scrapeInterval (default 30s)
            search.minStalenessInterval: "5m"
            search.maxConcurrentRequests: "6"
            vmalert.proxyURL: https://vmalert.greyrock.casa
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: openebs-hostpath
                resources:
                  requests:
                    storage: 2Gi
        # Data ingestion backend
        vminsert:
          replicaCount: 2 # HA
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 256Mi
          extraArgs:
            maxLabelsPerTimeseries: "90" # More needed if you are scraping a LOT of stuff and having issues
            # insert.maxConcurrentRequests: 10

    # VM Alerting (however, this just watches & passes alerts to alertmanager)
    vmalert:
      enabled: true
      spec:
        replicaCount: 2
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 100m
            memory: 256Mi
        evaluationInterval: "60s"
        notifiers:
          - url: http://alertmanager.monitoring.svc.cluster.local:9093
      ingress:
        enabled: true
        ingressClassName: internal-nginx
        hosts:
          - &hostalert vmalert.greyrock.casa
        tls:
          - hosts:
              - *hostalert

    # VM Data scraping
    vmagent:
      enabled: true
      spec:
        replicaCount: 1
        shardCount: 2
        resources:
          requests:
            cpu: 50m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi
        additionalScrapeConfigs:
          name: vm-additional-scrape-configs
          key: prometheus-additional.yaml

    # Single-binary vm cluster alternative (liteweight, non-HA)
    vmsingle:
      enabled: false

    # Extra slack templates
    monzoTemplate:
      enabled: false

    # Prepared sets of default rules
    # Adjust to what scraping functions you have enabled
    # i.e. if you dont have kubeapisever setup & enabled, disable
    #   the kubeApiserver rules below
    defaultRules:
      create: true
      rules:
        etcd: false
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubelet: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: false
        kubeStateMetrics: true
        network: true
        node: true
        vmagent: true
        vmsingle: true
        vmhealth: true
        alertmanager: &alertManagerEnabled false

    # Add Kubelet scrape
    kubelet:
      enabled: true
      spec:
        metricRelabelConfigs:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            source_labels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    # Add Kubeapi scrape
    kubeApiServer:
      enabled: true
      spec:
        metricRelabelConfigs:
          # Drop high cardinality labels
          - sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop

    # Add kubeControllerManager scrape
    kubeControllerManager:
      enabled: false

    # Add kubeScheduler scrape
    kubeScheduler:
      enabled: false

    # Add kubeEtcd scrape
    kubeEtcd:
      enabled: false

    # Enable deployment of kube state metrics contianers
    kube-state-metrics:
      enabled: false

    # Enable deployment of prom-note-exporter contianers
    prometheus-node-exporter:
      enabled: false

    # Enable deployment of grafana
    defaultDashboardsEnabled: false
    grafana:
      enabled: false

    # Enable deployment of alertmanager
    alertmanager:
      enabled: *alertManagerEnabled
